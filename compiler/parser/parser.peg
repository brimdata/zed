{
    package parser

    import (
        "github.com/brimdata/super/compiler/ast"
        "github.com/brimdata/super/compiler/ast/sql"
        astzed "github.com/brimdata/super/compiler/ast/zed"
    )
}

//start
//  = SuperSQL
//  = SuperPipe

start = SuperSQL / SuperPipe 

SuperPipe
  = __ scope:Scope __ EOF { return []any{scope}, nil }
  / __ seq:Seq __ EOF { return seq, nil }

Scope
  = decls:Decl+ body:Seq {
      return &ast.Scope{
        Kind: "Scope",
        Decls: sliceOf[ast.Decl](decls),
        Body: sliceOf[ast.Op](body),
      }, nil
    }

Seq
  = first:Operation rest:SeqTail* {
      return prepend(first, rest), nil
    }

SeqTail = __ Pipe __ o:Operation { return o, nil }

Decl
  = v:(ConstDecl / FuncDecl / OpDecl / TypeDecl) _ { return v, nil }

ConstDecl
  = "const" _ name:Identifier __ "=" __ expr:Expr {
      return &ast.ConstDecl{
          Kind: "ConstDecl",
          Name: name.(*ast.ID),
          Expr: expr.(ast.Expr),
          KeywordPos: c.pos.offset,
      }, nil
    }

FuncDecl
  = "func" _ name:Identifier __ "(" __ params:Identifiers? __ ")" __ ":" __ "(" __ expr:Expr __ ")" {
      return &ast.FuncDecl{
        Kind: "FuncDecl",
        Name: name.(*ast.ID),
        Params: sliceOf[*ast.ID](params),
        Expr: expr.(ast.Expr),
        KeywordPos: c.pos.offset,
        Rparen: lastPos(c, ")"),
      }, nil
    }

OpDecl
  = "op" _ name:Identifier __ "(" __ params:Identifiers? __ ")" __ ":" __ "(" __ body:OpDeclBody __ ")" {
      return &ast.OpDecl{
        Kind: "OpDecl",
        Name: name.(*ast.ID),
        Params: sliceOf[*ast.ID](params),
        Body: sliceOf[ast.Op](body),
        KeywordPos: c.pos.offset,
        Rparen: lastPos(c, ")"),
      }, nil
    }

OpDeclBody
  = scope:Scope { return []any{scope}, nil }
  / seq:Seq { return seq, nil }

TypeDecl
  = "type" _ name:Identifier __ "=" __ typ:Type {
      return &ast.TypeDecl{
        Kind: "TypeDecl",
        Name: name.(*ast.ID),
        Type: typ.(astzed.Type),
        KeywordPos: c.pos.offset,
      }, nil
    }

Operation
  = "fork" __ "(" paths:Leg+ __ ")" {
      var seqs []ast.Seq
      for _, p := range paths.([]any) {
        seqs = append(seqs, sliceOf[ast.Op](p))
      }
      return &ast.Parallel{
          Kind: "Parallel",
          Paths: seqs,
          KeywordPos: c.pos.offset,
          Rparen: lastPos(c, ")"),
      }, nil
    }
  / "switch" _ expr:Expr _ "(" cases:SwitchLeg+ __ ")" {
      return &ast.Switch{
          Kind: "Switch",
          Expr: expr.(ast.Expr),
          Cases: sliceOf[ast.Case](cases),
          KeywordPos: c.pos.offset,
          Rparen: lastPos(c, ")"),
      }, nil
    }
  / "switch" __ "(" cases:SwitchLeg+ __ ")" {
      return &ast.Switch{
          Kind: "Switch",
          Cases: sliceOf[ast.Case](cases),
          KeywordPos: c.pos.offset,
          Rparen: lastPos(c, ")"),
      }, nil
    }
  / "from" __ "(" trunks:FromLeg+ __ ")" {
      return &ast.From{
          Kind: "From",
          Trunks: sliceOf[ast.Trunk](trunks),
          KeywordPos: c.pos.offset,
          Rparen: lastPos(c, ")"),
      }, nil
    }
  / "(" __ scope:Scope __ ")" { return scope, nil }
  / op:Operator
  / a:OpAssignment &EndOfOp { return a, nil }
  / !(Function EndOfOp) a:Aggregation &EndOfOp { return a, nil }
  / "search" _ expr:SearchBoolean {
      return &ast.Search{Kind:"Search",Expr:expr.(ast.Expr),KeywordPos:c.pos.offset}, nil
    }
  / expr:SearchBoolean {
      return &ast.OpExpr{Kind:"OpExpr",Expr:expr.(ast.Expr)}, nil
    }
  / expr:Cast {
      return &ast.OpExpr{Kind:"OpExpr",Expr:expr.(ast.Expr)}, nil
  }
  / expr:Expr {
      return &ast.OpExpr{Kind:"OpExpr",Expr:expr.(ast.Expr)}, nil
    }

EndOfOp = __ (Pipe / SearchKeywordGuard / "=>" / ")" / EOF)
Pipe = "|>" / "|" !("{" / "[")

Leg = __ "=>" __ seq:Seq { return seq, nil }

SwitchLeg
  = __ expr:Case path:Leg {
      l := ast.Case{Path: sliceOf[ast.Op](path)}
      if expr != nil {
        l.Expr = expr.(ast.Expr)
      }
      return l, nil
    }

Case
  = "case" _ expr:Expr { return expr, nil }
  / "default" { return nil, nil }

FromLeg
  = __ source:FromSource opt:(__ "=>" __ Seq)? {
      t := ast.Trunk{Kind:"Trunk",Source:source.(ast.Source)}
      if opt != nil {
        t.Seq = sliceOf[ast.Op](opt.([]any)[3])
      }
      return t, nil
    }

FromSource
  = File
  / Get
  / Pool
  / PassOp

ExprGuard = __ ((!"=>" Comparator) / AdditiveOperator / MultiplicativeOperator / ":" / "(" / "[" / "~")

Comparator = ("==" / "!=" / ("in" !IdentifierRest) / "<=" / "<" / ">=" / ">") { return string(c.text), nil }

SearchBoolean
  = first:SearchAnd rest:SearchOrTerm* {
      return makeBinaryExprChain(first, rest), nil
    }

SearchOrTerm = _ OrToken _ t:SearchAnd { return []any{"or", t}, nil }

SearchAnd
  = first:SearchFactor
    rest:((_ AndToken)? _ !(OrToken / SearchKeywordGuard) expr:SearchFactor { return []any{"and", expr}, nil })* {
      return makeBinaryExprChain(first, rest), nil
    }

SearchKeywordGuard
  = FromSource __ "=>" __
  / Case __

SearchFactor
  = (NotToken _ / "!" __) e:SearchFactor {
      return &ast.UnaryExpr{
          Kind: "UnaryExpr",
          Op: "!",
          Operand: e.(ast.Expr),
      }, nil
    }
  / "(" __ expr:SearchBoolean __ ")" { return expr, nil }
  / SearchExpr

SearchExpr
  = Regexp
  / Glob
  / v:SearchValue (!ExprGuard / &(_ Glob)) {
      return &ast.Term{
        Kind: "Term",
        Text: string(c.text),
        TextPos: c.pos.offset,
        Value: v.(astzed.Any),
      }, nil
    }
  / "*" !ExprGuard {
      return &astzed.Primitive{Kind:"Primitive",Type:"bool",Text:"true"}, nil
    }
  / SearchPredicate

SearchPredicate
  = lhs:AdditiveExpr __ op:Comparator __ rhs:AdditiveExpr {
      return &ast.BinaryExpr{
        Kind: "BinaryExpr",
        Op: op.(string),
        LHS: lhs.(ast.Expr),
        RHS: rhs.(ast.Expr),
      }, nil
    }
  / f:Function { return f, nil }

SearchValue
  = Literal
  / !RegexpPattern v:KeyWord {
      return newPrimitive(c, "string", v.(string)), nil
    }

QuotedStringNode 
  = s:QuotedString {
      return &ast.QuotedString{Kind: "QuotedString", Text: s.(string), Lquote: c.pos.offset}, nil
    }

Glob
  = pattern:GlobPattern {
      return &ast.Glob{Kind: "Glob", Pattern: pattern.(string), PatternPos: c.pos.offset}, nil
    }

Regexp
  = pattern:RegexpPattern {
      return &ast.Regexp{Kind:"Regexp", Pattern:pattern.(string), PatternPos: c.pos.offset}, nil
    }

/// === Aggregations ===

Aggregation
  = Summarize keys:GroupByKeys limit:LimitArg {
      return &ast.Summarize{
        Kind: "Summarize",
        Keys: sliceOf[ast.Assignment](keys),
        Limit: limit.(int),
        StartPos: c.pos.offset,
      }, nil
    }
  / Summarize aggs:AggAssignments keys:(_ GroupByKeys)? limit:LimitArg {
      s := &ast.Summarize{
        Kind: "Summarize",
        Aggs: sliceOf[ast.Assignment](aggs),
        Limit: limit.(int),
        StartPos: c.pos.offset,
      }
      if keys != nil {
        s.Keys = sliceOf[ast.Assignment](keys.([]any)[1])
      }
      return s, nil
    }

Summarize = KW_AGGREGATE _ / ("summarize" _)?

GroupByKeys
  = (KW_GROUP _)? ByToken _ columns:FlexAssignments { return columns, nil }

LimitArg
  = _ "with" _ "-limit" _ limit:UInt { return limit, nil }
  / "" { return 0, nil }

// A FlexAssignment is like an Assignment but it can optionally omit the lhs,
// in which case the semantic pass will infer a name from the rhs, e.g., for
// an expression like "count() by foo", the rhs is Field "foo" and the lhs is nil.
FlexAssignment
  = Assignment
  / expr:Expr { return ast.Assignment{Kind:"Assignment",RHS:expr.(ast.Expr)}, nil }

FlexAssignments
  = first:FlexAssignment rest:(__ "," __ expr:FlexAssignment { return expr, nil })* {
      return prepend(first, rest), nil
    }

AggAssignment
  = lval:Lval __ ":=" __ agg:Agg {
      return ast.Assignment{Kind:"Assignment",LHS:lval.(ast.Expr),RHS:agg.(ast.Expr)}, nil
    }
  / agg:Agg {
      return ast.Assignment{Kind:"Assignment",RHS:agg.(ast.Expr)}, nil
    }

Agg
  = !FuncGuard op:AggName __ "(" __ expr:(OverExpr / Expr)? __ rparen:(")" { return c.pos.offset, nil }) !(__ ".") where:WhereClause? {
      agg := &ast.Agg{
          Kind:"Agg", 
          Name: op.(string),
          NamePos: c.pos.offset,
          Rparen: rparen.(int),
      }
      if expr != nil {
        agg.Expr = expr.(ast.Expr)
      }
      if where != nil {
        agg.Where = where.(ast.Expr)
      }
      return agg, nil
    }

AggName
  = IdentifierName
  / AndToken
  / OrToken

WhereClause = _ "where" _ expr:LogicalOrExpr { return expr, nil }

AggAssignments
  = first:AggAssignment rest:(__ "," __ AggAssignment)* {
      result := []any{first}
      for _, r := range rest.([]any) {
          result = append(result, r.([]any)[3])
      }
      return result, nil
    }

/// === Operators ===

Operator
  = AssertOp
  / SortOp
  / TopOp
  / CutOp
  / DropOp
  / HeadOp
  / TailOp
  / WhereOp
  / UniqOp
  / PutOp
  / RenameOp
  / FuseOp
  / ShapeOp
  / JoinOp
  / SampleOp
  / FromOp
  / PassOp
  / ExplodeOp
  / MergeOp
  / OverOp
  / YieldOp
  / LoadOp
  / OutputOp
  / DebugOp

AssertOp
  = "assert" _ expr:(e:Expr { return []any{e, string(c.text)}, nil }) {
      return &ast.Assert{
          Kind: "Assert",
          Expr: expr.([]any)[0].(ast.Expr),
          Text: expr.([]any)[1].(string),
          KeywordPos: c.pos.offset,
      }, nil
    }

SortOp
  = "sort" &EOKW args:SortArgs exprs:(__ e:SortExprs { return e, nil })? {
      o := &ast.Sort{
        Kind: "Sort",
        KeywordPos: c.pos.offset,
        Args: sliceOf[ast.SortExpr](exprs),
      }
      argm := args.(map[string]any)
      if _, ok := argm["r"]; ok {
        o.Reverse = true
      }
      if n, ok := argm["nulls"]; ok && n == "first" {
        o.NullsFirst = true
      }
      return o, nil
    }

SortArgs = args:(_ a:SortArg { return a, nil })* { return makeArgMap(args) }

SortArg
  = "-r" { return map[string]any{"name": "r", "value": nil}, nil }
  / "-nulls" _ where:(("first" / "last") { return string(c.text), nil }) {
        return map[string]any{"name": "nulls", "value": where}, nil
      }

TopOp
  = "top" &EOKW limit:(_ e:Expr { return e, nil })? flush:(_ "-flush")? fields:(_ f:FieldExprs { return f, nil })? {
      op := &ast.Top{
        Kind: "Top",
        KeywordPos: c.pos.offset,
      }
      if limit != nil {
        op.Limit = limit.(ast.Expr)
      }
      if fields != nil {
        op.Args = sliceOf[ast.Expr](fields)
      }
      if flush != nil {
        op.Flush = true
      }
      return op, nil
    }

CutOp
  = "cut" _ args:FlexAssignments {
      return &ast.Cut{
        Kind: "Cut",
        Args: sliceOf[ast.Assignment](args),
        KeywordPos: c.pos.offset,
      }, nil
    }

DropOp
  = "drop" _ args:FieldExprs {
      return &ast.Drop{
          Kind: "Drop",
          Args: sliceOf[ast.Expr](args),
          KeywordPos: c.pos.offset,
      }, nil
    }

HeadOp
  = "head" _ !EndOfOp count:Expr {
      return &ast.Head{
        Kind: "Head",
        Count: count.(ast.Expr),
        KeywordPos: c.pos.offset,
      }, nil
    }
  / "head" !(__ "(") &EOKW {
      return &ast.Head{
        Kind: "Head",
        KeywordPos: c.pos.offset,
      }, nil
    }

TailOp
  = "tail" _ !EndOfOp count:Expr {
      return &ast.Tail{
        Kind: "Tail",
        Count: count.(ast.Expr),
        KeywordPos: c.pos.offset,
      }, nil
    }
  / "tail" !(__ "(") &EOKW {
      return &ast.Tail{
        Kind: "Tail",
        KeywordPos: c.pos.offset,
      }, nil
    }

WhereOp
  = "where" _ expr:Expr {
      return &ast.Where{
        Kind: "Where",
        Expr: expr.(ast.Expr),
        KeywordPos: c.pos.offset,
      }, nil
    }

UniqOp
  = "uniq" _ "-c" {
      return &ast.Uniq{Kind: "Uniq", Cflag: true, KeywordPos: c.pos.offset}, nil
    }
  / "uniq" !(__ "(") &EOKW {
      return &ast.Uniq{Kind: "Uniq", KeywordPos: c.pos.offset}, nil
    }

PutOp
  = "put" _ args:Assignments {
      return &ast.Put{
          Kind: "Put",
          Args: sliceOf[ast.Assignment](args),
          KeywordPos: c.pos.offset,
      }, nil
    }

RenameOp
  = "rename" _ first:Assignment rest:(__ "," __ cl:Assignment { return cl, nil })* {
      args := append([]any{first}, rest.([]any)...)
      return &ast.Rename{
        Kind: "Rename",
        Args: sliceOf[ast.Assignment](args),
        KeywordPos: c.pos.offset,
      }, nil
    }

// The paren guard is to allow parsing fuse() as an aggregator. This
// is temporary pending finalizing the names
// (https://github.com/brimdata/super/issues/2114) for the fuse op and
// aggregator, at which point we may no longer need this.
FuseOp
  = "fuse" !(__ "(") &EOKW {
      return &ast.Fuse{Kind: "Fuse", KeywordPos: c.pos.offset}, nil
    }

ShapeOp
  = "shape" !(__ "(") &EOKW {
      return &ast.Shape{Kind: "Shape", KeywordPos: c.pos.offset}, nil
    }

JoinOp
  = style:JoinStyle "join" rightInput:JoinRightInput "on" _ key:JoinKey optKey:(__ "=" __ JoinKey)? optArgs:(_ FlexAssignments)? {
      o := &ast.Join{
        Kind: "Join",
        Style: style.(string),
        LeftKey: key.(ast.Expr),
        KeywordPos: c.pos.offset,
      }
      if rightInput != nil {
        o.RightInput = sliceOf[ast.Op](rightInput)
      }
      if optKey != nil {
        o.RightKey = optKey.([]any)[3].(ast.Expr)
      }
      if optArgs != nil {
        o.Args = sliceOf[ast.Assignment](optArgs.([]any)[1])
      }
      return o, nil
    }

JoinStyle
  = "anti" _  { return "anti", nil }
  / "inner" _ { return "inner", nil }
  / "left"  _ { return "left", nil }
  / "right" _ { return "right", nil }
  / ""        { return "inner", nil }

JoinRightInput
  = __ "(" __ s:Seq __ ")" __ { return s, nil }
  / _ { return nil, nil }

JoinKey
  = Lval
  / "(" expr:Expr ")" { return expr, nil }

SampleOp
  = "sample" &EOKW expr:(_ e:Lval { return e, nil })? {
      o := &ast.Sample{Kind: "Sample", KeywordPos: c.pos.offset}
      if expr != nil {
        o.Expr = expr.(ast.Expr)
      }
      return o, nil
    }

// OpAssignment is a top level operator that contains a list of assignment
// expressions. It is in an ambiguous state and could either be:
//   1) A summarize operator.
//   2) A put operator.
//  The semantic pass is responsible for converting it to one of the two.
OpAssignment
  = a:Assignments {
      return &ast.OpAssignment{
          Kind: "OpAssignment",
          Assignments: sliceOf[ast.Assignment](a),
      }, nil
    }

LoadOp
  = "load" _ pool:PoolNameString branch:PoolBranch? author:AuthorArg? message:MessageArg? meta:MetaArg? {
      return &ast.Load{
        Kind: "Load",
        Pool: nullableString(pool),
        Branch: nullableString(branch),
        Author: nullableString(author),
        Message: nullableString(message),
        Meta: nullableString(meta),
        KeywordPos: c.pos.offset,
        EndPos: c.pos.offset+len(c.text),
      }, nil
    }

AuthorArg
  = _ "author" _ val:QuotedString { return val, nil }

MessageArg
  = _ "message" _ val:QuotedString { return val, nil }

MetaArg
  = _ "meta" _ val:QuotedString { return val, nil }

PoolBranch
  = "@" branch:(PoolIdentifier / QuotedString) { return branch, nil }

OutputOp
  = "output" _ name:Identifier {
      return &ast.Output{
        Kind: "Output",
        KeywordPos: c.pos.offset,
        Name: name.(*ast.ID),
      }, nil
    }

DebugOp
  = "debug" &EOKW expr:(_ e:Expr { return e, nil })? {
      d := &ast.Debug{
        Kind: "Debug",
        KeywordPos: c.pos.offset,
      }
      if expr != nil {
        d.Expr = expr.(ast.Expr)
      }
      return d, nil
    }

FromOp
  = File
  / Get
  / From

File
  = "file" _ path:Path format:FormatArg? sortKeys:OrderArg? {
      return &ast.File{
        Kind: "File",
        KeywordPos: c.pos.offset,
        Path: path.(ast.Pattern),
        Format: nullableString(format),
        SortKeys: sliceOf[ast.SortExpr](sortKeys),
        EndPos: c.pos.offset+len(c.text),
      }, nil
    }

From
  = "from" _ spec:PoolSpec {
      return &ast.Pool{
        Kind: "Pool",
        Spec: spec.(ast.PoolSpec),
        KeywordPos: c.pos.offset,
        EndPos: c.pos.offset+len(c.text),
      }, nil
    }

Pool
  = "pool" _ spec:PoolSpec {
      return &ast.Pool{
        Kind: "Pool",
        Spec: spec.(ast.PoolSpec),
        KeywordPos: c.pos.offset,
        EndPos: c.pos.offset+len(c.text),
      }, nil
    }

Get
  = "get" _ url:Path format:FormatArg? sortKeys:OrderArg? method:MethodArg? headers:HeadersArg? body:BodyArg? {
      h := &ast.HTTP{
        Kind: "HTTP",
        URL: url.(ast.Pattern),
        Format: nullableString(format),
        SortKeys: sliceOf[ast.SortExpr](sortKeys),
        Method: nullableString(method),
        KeywordPos: c.pos.offset,
        Body: nullableString(body),
        EndPos: c.pos.offset+len(c.text),
      }
      if headers != nil {
        h.Headers = headers.(*ast.RecordExpr)
      }
      return h, nil
    }

MethodArg = _ "method" _ v:(IdentifierName / QuotedString) { return v, nil }

HeadersArg = _ "headers" _ v:Record { return v, nil }

BodyArg = _ "body" _ v:(IdentifierName / QuotedString) { return v, nil }

Path
  = QuotedStringNode
  / [0-9a-zA-Z!@$%^&*_=<>,./?:[\]{}~+-]+ {
      return &ast.String{Kind: "String", Text: string(c.text), TextPos: c.pos.offset}, nil
    }

//XXX this should be a timestamp
PoolAt
  = _ "at" _ id:KSUID { return id, nil }

//XXX this should allow 0x bytes format
KSUID = ([0-9a-zA-Z])+ { return string(c.text), nil }

PoolSpec
  = pool:PoolName commit:PoolCommit? meta:PoolMeta? tap:TapArg {
      return ast.PoolSpec{
        Pool: pool.(ast.Pattern),
        Commit: nullableString(commit),
        Meta: nullableString(meta),
        Tap: tap.(bool),
      }, nil
    }
  / meta:PoolMeta {
      return ast.PoolSpec{Meta: meta.(string)}, nil
    }

PoolCommit
  = "@" commit:PoolNameString { return commit, nil }

PoolMeta
  = ":" meta:PoolIdentifier { return meta, nil }

PoolName
  = Regexp
  / Glob
  / "*" !ExprGuard { return &ast.Glob{Kind: "Glob", Pattern: "*", PatternPos: c.pos.offset}, nil }
  / QuotedStringNode
  / name:PoolNameString { return &ast.String{Kind: "String", Text: name.(string), TextPos: c.pos.offset}, nil }

PoolNameString
  = PoolIdentifier
  / KSUID
  / QuotedString

PoolIdentifier
  = (IdentifierStart / ".") (IdentifierRest / ".")* { return string(c.text), nil }

OrderArg
  = _ "order" _ exprs:SortExprs {
      return exprs, nil
    }

SortExprs
  = first:SortExpr rest:(__ "," __ s:SortExpr { return s, nil })* {
      return prepend(first, rest), nil
    }

SortExpr
  = e:Expr order:(_ o:OrderSpec { return o, nil })? {
      s := ast.SortExpr{Kind: "SortExpr", Expr: e.(ast.Expr)}      
      if order != nil {
        s.Order = order.(*ast.ID)
      }
      return s, nil
    }

OrderSpec
  = ("asc" / "desc") {
      return &ast.ID{Kind: "ID", Name: string(c.text), NamePos: c.pos.offset}, nil
    }

TapArg
  = _ "tap" { return true, nil }
  / "" { return false, nil }

FormatArg
  = _ "format" _ val:IdentifierName { return val, nil }

PassOp
  = "pass" !(__ "(") &EOKW {
      return &ast.Pass{Kind: "Pass", KeywordPos: c.pos.offset}, nil
    }

// Currently we support only "explode by type" but this will be generalized
// to explode arbitrary arrays, records, etc.
ExplodeOp
  = "explode" _ args:Exprs typ:TypeArg as:AsArg? {
      o := &ast.Explode{
        Kind: "Explode",
        Args: sliceOf[ast.Expr](args),
        Type: typ.(astzed.Type),
        KeywordPos: c.pos.offset,
      }
      if as != nil {
        o.As = as.(ast.Expr)
      }
      return o, nil
    }

MergeOp
  = "merge" _ expr:Expr {
      return &ast.Merge{
        Kind: "Merge",
        Expr: expr.(ast.Expr),
        KeywordPos: c.pos.offset,
      }, nil
    }

OverOp
  = "over" _ exprs:Exprs locals:Locals? body:Lateral? {
      o := &ast.Over{
        Kind: "Over",
        Exprs: sliceOf[ast.Expr](exprs),
        Locals: sliceOf[ast.Def](locals),
        KeywordPos: c.pos.offset,
        Rparen: -1,
      }
      if body != nil {
        o.Body = sliceOf[ast.Op](body.([]any)[0])
        o.Rparen = body.([]any)[1].(int)
      }
      return o, nil
    }

Lateral
  = __ "=>" __ "(" __ scope:Scope __ ")" {
      return []any{[]any{scope.(*ast.Scope)}, lastPos(c, ")")}, nil
    }
  / __ "=>" __ "(" __ seq:Seq __ ")" {
      return []any{seq, lastPos(c, ")")}, nil
    }

Locals
  = _ "with" _ first:LocalsAssignment rest:(__ "," __ a:LocalsAssignment { return a, nil })* {
      return prepend(first, rest), nil
    }

LocalsAssignment
  = name:Identifier opt:(__ "=" __ Expr)? {
      def := ast.Def{
        Name: name.(*ast.ID),
        Expr: name.(*ast.ID),
      }
      if opt != nil {
        def.Expr = opt.([]any)[3].(ast.Expr)
      }
      return def, nil
    }

YieldOp
  = "yield" _ exprs:Exprs {
      return &ast.Yield{
          Kind: "Yield",
          Exprs: sliceOf[ast.Expr](exprs),
          KeywordPos: c.pos.offset,
      }, nil
    }

TypeArg
  = _ "by" _ typ:Type { return typ, nil }

AsArg
  = _ "as" _ lhs:Lval { return lhs, nil }

/// === Expressions ===

Lval = DerefExpr

Lvals
  = first:Lval rest:(__ "," __ lval:Lval { return lval, nil })* {
      return prepend(first, rest), nil
    }

FieldExpr = Lval

FieldExprs
  = first:FieldExpr rest:(__ "," __ f:FieldExpr{ return f, nil })* {
      return prepend(first, rest), nil
    }

Assignments
  = first:Assignment rest:(__ "," __ a:Assignment { return a, nil })* {
    return prepend(first, rest), nil
  }

Assignment
  = lhs:Lval __ ":=" __ rhs:Expr {
      return ast.Assignment{
          Kind: "Assignment",
          LHS: lhs.(ast.Expr),
          RHS: rhs.(ast.Expr),
      }, nil
    }

Expr = ConditionalExpr

ConditionalExpr
  = cond:LogicalOrExpr opt:(__ "?" __ Expr __ ":" __ Expr)? {
      if opt != nil {
        t, e := opt.([]any)[3], opt.([]any)[7]
        return &ast.Conditional{
            Kind: "Conditional",
            Cond: cond.(ast.Expr),
            Then: t.(ast.Expr),
            Else: e.(ast.Expr),
        }, nil
      }
      return cond, nil
    }

LogicalOrExpr
  = first:LogicalAndExpr
    rest:(__ op:OrToken __ expr:LogicalAndExpr { return []any{op, expr}, nil })* {
        return makeBinaryExprChain(first, rest), nil
    }

LogicalAndExpr
  = first:ComparisonExpr
    rest:(__ op:AndToken __ expr:ComparisonExpr { return []any{op, expr}, nil })* {
        return makeBinaryExprChain(first, rest), nil
    }

ComparisonExpr
  = lhs:AdditiveExpr opAndRHS:(__ Comparator __ AdditiveExpr / __ ("~" { return string(c.text), nil }) __ Regexp)? {
      if opAndRHS == nil {
        return lhs, nil
      }
      return &ast.BinaryExpr{
        Kind: "BinaryExpr",
        Op: opAndRHS.([]any)[1].(string),
        LHS: lhs.(ast.Expr),
        RHS: opAndRHS.([]any)[3].(ast.Expr),
      }, nil
    }

AdditiveExpr
  = first:MultiplicativeExpr
    rest:(__ op:AdditiveOperator __ expr:MultiplicativeExpr { return []any{op, expr}, nil })* {
        return makeBinaryExprChain(first, rest), nil
    }

AdditiveOperator = ("+" / "-") { return string(c.text), nil }

MultiplicativeExpr
  = first:NotExpr
    rest:(__ op:MultiplicativeOperator __ expr:NotExpr { return []any{op, expr}, nil })* {
        return makeBinaryExprChain(first, rest), nil
    }

MultiplicativeOperator = ("*" / "/" / "%") { return string(c.text), nil }

NotExpr
  = (NotToken _ / "!" __) e:NotExpr {
      return &ast.UnaryExpr{
          Kind: "UnaryExpr",
          Op: "!",
          OpPos: c.pos.offset,
          Operand: e.(ast.Expr),
      }, nil
    }
  / NegationExpr

NegationExpr
  = !Literal "-" __ e:DerefExpr {
      return &ast.UnaryExpr{
          Kind: "UnaryExpr",
          Op: "-",
          OpPos: c.pos.offset,
          Operand: e.(ast.Expr),
      }, nil
    }
  / DerefExpr

DerefExpr
  = expr:DerefExpr "[" from:AdditiveExpr __ ":" __ to:AdditiveExpr? "]" {
      e := &ast.SliceExpr{
        Kind: "SliceExpr",
        Expr: expr.(ast.Expr),
        From: from.(ast.Expr),
        Rbrack: lastPos(c, "]"),
      }
      if to != nil {
        e.To = to.(ast.Expr)
      }
      return e, nil
    }
  / expr:DerefExpr "[" __ ":" __ to:AdditiveExpr "]" {
      return &ast.SliceExpr{
        Kind: "SliceExpr",
        Expr: expr.(ast.Expr),
        To: to.(ast.Expr),
        Rbrack: lastPos(c, "]"),
      }, nil
    }
  / expr:DerefExpr "[" index:Expr "]" {
      return &ast.IndexExpr{
        Kind: "IndexExpr",
        Expr: expr.(ast.Expr),
        Index: index.(ast.Expr),
        Rbrack: lastPos(c, "]"),
      }, nil
    }
  / expr:DerefExpr "." id:Identifier {
      return &ast.BinaryExpr{
        Kind: "BinaryExpr",
        Op: ".",
        LHS: expr.(ast.Expr),
        RHS: id.(ast.Expr),
      }, nil
    }
  / fn:FuncExpr {
      return fn, nil
    }
  / expr:Primary {
      return expr, nil
    }


FuncExpr
  = cast:Cast {
      return cast, nil
    }
  / fn:Function {
      return fn, nil
    }

FuncGuard = NotFuncs __ "("

NotFuncs
  = "not"
  / "select"

Cast
  = typ:TypeLiteral __ "(" __ expr:(OverExpr / Expr) __ ")" {
      return &ast.Cast{Kind: "Cast", Expr: expr.(ast.Expr), Type: typ.(ast.Expr), Rparen: lastPos(c, ")")}, nil
    }

Function
  = Grep
  // Special case to handle `regexp(/x/, y)` and `regexp_replace(x, /y/, z)`.
  / "regexp" __ "(" __ arg0:RegexpPrimitive __ "," __ arg1:Expr __ ")" where:WhereClause? {
      id := &ast.ID{Kind: "ID", Name: "regexp", NamePos: c.pos.offset}
      return newCall(c, id, []any{arg0, arg1}, where), nil
    }
  / "regexp_replace" __ "(" __ arg0:Expr __ "," __ arg1:RegexpPrimitive __ "," __ arg2:Expr __ ")" where:WhereClause? {
      id := &ast.ID{Kind: "ID", Name: "regexp_replace", NamePos: c.pos.offset}
      return newCall(c, id, []any{arg0, arg1, arg2}, where), nil
    }
  / !FuncGuard fn:Identifier __ "(" __ args:FunctionArgs __ ")" where:WhereClause? {
      return newCall(c, fn, args, where), nil
    }

RegexpPrimitive
  = pat:RegexpPattern { return newPrimitive(c, "string", pat.(string)), nil }

FunctionArgs
  = o:OverExpr { return []any{o}, nil }
  / OptionalExprs

Grep
  = "grep" __ "(" __ pattern:(Regexp / Glob / Expr) __ opt:("," __ e:(OverExpr / Expr) __ { return e, nil })? ")" {
      g := &ast.Grep{
          Kind: "Grep",
          KeywordPos: c.pos.offset,
          Pattern: pattern.(ast.Expr),
          Rparen: lastPos(c, ")"),
      }
      if opt != nil {
          g.Expr = opt.(ast.Expr)
      }
      return g, nil
    }

OptionalExprs
  = Exprs
  / __ { return []any{}, nil }

Exprs
  = first:Expr rest:(__ "," __ e:Expr { return e, nil })* {
      return prepend(first, rest), nil
    }

Primary
  = Record
  / Array
  / Set
  / Map
  / Literal
  / Identifier
  / "(" __ expr:OverExpr __ ")" { return expr, nil }
  / "(" __ expr:Expr __ ")" { return expr, nil }

OverExpr
  = ("over" / "from") _ exprs:Exprs locals:Locals? __ Pipe __ body:Seq {
      return &ast.OverExpr{
          Kind: "OverExpr",
          KeywordPos: c.pos.offset,
          Locals: sliceOf[ast.Def](locals),
          Exprs: sliceOf[ast.Expr](exprs),
          Body: sliceOf[ast.Op](body),
      }, nil
    }

Record
  = "{" __ elems:RecordElems __ "}" {
      return &ast.RecordExpr{
          Kind: "RecordExpr",
          Lbrace: c.pos.offset,
          Elems: sliceOf[ast.RecordElem](elems),
          Rbrace: lastPos(c, "}"),
      }, nil
    }

RecordElems
  = first:RecordElem rest:RecordElemTail* {
    return prepend(first, rest), nil
  }
  / __ { return nil, nil }

RecordElemTail = __ "," __ elem:RecordElem { return elem, nil }

RecordElem
  = Spread
  / Field
  / Identifier

Spread
  = "..." __ expr:Expr {
      return &ast.Spread{Kind: "Spread", Expr: expr.(ast.Expr), StartPos: c.pos.offset}, nil
    }

Field
  = name:FieldName __ ":" __ value:Expr {
      return &ast.Field{
        Kind: "Field",
        Name: name.(string),
        NamePos: c.pos.offset,
        Value: value.(ast.Expr),
      }, nil
    }

Array
  = "[" __ elems:VectorElems __ "]" {
      return &ast.ArrayExpr{
          Kind: "ArrayExpr",
          Lbrack: c.pos.offset,
          Elems: sliceOf[ast.VectorElem](elems),
          Rbrack: lastPos(c, "]"),
      }, nil
    }

Set
  = "|[" __ elems:VectorElems __ "]|" {
      return &ast.SetExpr{
          Kind: "SetExpr",
          Lpipe: c.pos.offset,
          Elems: sliceOf[ast.VectorElem](elems),
          Rpipe: lastPos(c, "|"),
      }, nil
    }

VectorElems
  = first:VectorElem rest:(__ "," __ e:VectorElem { return e, nil })* {
      return prepend(first, rest), nil
    }
  / __ { return nil, nil }

VectorElem
  = Spread
  / e:Expr { return &ast.VectorValue{Kind: "VectorValue", Expr: e.(ast.Expr)}, nil }

Map
  = "|{" __ exprs:Entries __ "}|" {
      return &ast.MapExpr{
          Kind: "MapExpr",
          Lpipe: c.pos.offset,
          Entries: sliceOf[ast.EntryExpr](exprs),
          Rpipe: lastPos(c, "|"),
      }, nil
    }

Entries
  = first:Entry rest:EntryTail* {
    return prepend(first, rest), nil
  }
  / __ { return nil, nil }


EntryTail = __ "," __ e:Entry { return e, nil }

Entry
  = key:Expr __ ":" __ value:Expr {
      return ast.EntryExpr{Key: key.(ast.Expr), Value: value.(ast.Expr)}, nil
    }

/// === Literals ===

Literal
  = TypeLiteral
  / StringLiteral
  / FString
  / SubnetLiteral
  / AddressLiteral
  / BytesLiteral
  / Duration
  / Time
  / FloatLiteral
  / IntegerLiteral
  / BooleanLiteral
  / NullLiteral

SubnetLiteral
  = v:IP6Net !IdentifierRest {
      return newPrimitive(c, "net", v.(string)), nil
    }
  / v:IP4Net {
      return newPrimitive(c, "net", v.(string)), nil
    }

AddressLiteral
  = v:IP6 !IdentifierRest {
      return newPrimitive(c, "ip", v.(string)), nil
    }
  / v:IP {
      return newPrimitive(c, "ip", v.(string)), nil
    }

FloatLiteral
  = v:FloatString {
      return newPrimitive(c, "float64", v.(string)), nil
    }

IntegerLiteral
  = v:IntString {
      return newPrimitive(c, "int64", v.(string)), nil
    }

BooleanLiteral
  = TrueToken  { return newPrimitive(c, "bool", "true"), nil }
  / FalseToken { return newPrimitive(c, "bool", "false"), nil }

NullLiteral
  = NullToken { return newPrimitive(c, "null", ""), nil }

BytesLiteral
  = "0x" HexDigit* {
    return newPrimitive(c, "bytes", string(c.text)), nil
  }

TypeLiteral
  = "<" typ:Type ">" {
      return &astzed.TypeValue{
        Kind:"TypeValue",
        Lbrack: c.pos.offset,
        Value: typ.(astzed.Type),
        Rbrack: lastPos(c, ">"),
      }, nil
    }

Type
  = AmbiguousType
  / ComplexType

AmbiguousType
  = name:PrimitiveType !IdentifierRest { return name, nil }
  / "error" __ "(" __ t:Type __ ")" {
      return &astzed.TypeError{
          Kind: "TypeError",
          Type: t.(astzed.Type),
          KeywordPos: c.pos.offset,
          Rparen: lastPos(c, ")"),
      }, nil
    }
  / name:(IdentifierName / QuotedString) opt:(__ '=' __ Type)? {
      if opt != nil {
        return &astzed.TypeDef{
            Kind: "TypeDef",
            Name: name.(string),
            NamePos: c.pos.offset,
            Type: opt.([]any)[3].(astzed.Type),
        }, nil
      }
      return &astzed.TypeName{Kind: "TypeName", Name: name.(string), NamePos: c.pos.offset}, nil
    }
  / "(" __ types:TypeList ")" {
      return &astzed.TypeUnion{
        Kind: "TypeUnion",
        Lparen: c.pos.offset,
        Types: sliceOf[astzed.Type](types),
        Rparen: lastPos(c, ")"),
      }, nil
    }

TypeList
  = first:Type rest:TypeListTail+ {
    return prepend(first, rest), nil
  }

TypeListTail = __ "," __ typ:Type { return typ, nil }

ComplexType
  = "{" __ fields:TypeFieldList __ "}" {
      return &astzed.TypeRecord{
          Kind: "TypeRecord",
          Lbrace: c.pos.offset,
          Fields: sliceOf[astzed.TypeField](fields),
          Rbrace: lastPos(c, "}"),
      }, nil
    }
  / "[" __ typ:Type __ "]" {
      return &astzed.TypeArray{
          Kind: "TypeArray",
          Lbrack: c.pos.offset,
          Type: typ.(astzed.Type),
          Rbrack: lastPos(c, "]"),
      }, nil
    }
  / "|[" __ typ:Type __ "]|" {
      return &astzed.TypeSet{
          Kind: "TypeSet",
          Lpipe: c.pos.offset,
          Type: typ.(astzed.Type),
          Rpipe: lastPos(c, "|"),
      }, nil
    }
  / "|{" __ keyType:Type __ ":" __ valType:Type __ "}|" {
      return &astzed.TypeMap{
        Kind: "TypeMap",
        Lpipe: c.pos.offset,
        KeyType: keyType.(astzed.Type),
        ValType: valType.(astzed.Type),
        Rpipe: lastPos(c, "|"),
      }, nil
    }

StringLiteral
  = '"' v:DoubleQuotedChar* '"' { return newPrimitive(c, "string", joinChars(v)), nil }
  / "'" v:SingleQuotedChar* "'" { return newPrimitive(c, "string", joinChars(v)), nil }

FString
  = "f\"" v:FStringDoubleQuotedElem* '"' {
      return &ast.FString{
        Kind: "FString",
        StartPos: c.pos.offset,
        Elems: sliceOf[ast.FStringElem](v),
      }, nil
    }
  / "f'" v:FStringSingleQuotedElem* "'" {
      return &ast.FString{
        Kind: "FString",
        StartPos: c.pos.offset,
        Elems: sliceOf[ast.FStringElem](v),
      }, nil
    }

FStringDoubleQuotedElem
  = FStringExpr
  / v:FStringDoubleQuotedChar+ {
      return &ast.FStringText{Kind: "FStringText", TextPos: c.pos.offset, Text: joinChars(v)}, nil
    }

FStringDoubleQuotedChar
  = "\\" v:"{" { return v, nil }
  / !("{") v:DoubleQuotedChar { return v, nil }

FStringSingleQuotedElem
  = FStringExpr
  / v:FStringSingleQuotedChar+ {
      return &ast.FStringText{Kind: "FStringText", TextPos: c.pos.offset, Text: joinChars(v)}, nil
    }

FStringSingleQuotedChar
  = "\\" v:"{" { return v, nil }
  / !("{") v:SingleQuotedChar { return v, nil }

FStringExpr
  = "{" __ e:Expr __ "}" {
      return &ast.FStringExpr{
        Kind: "FStringExpr",
        Lbrace: c.pos.offset, 
        Expr: e.(ast.Expr),
        Rbrace: lastPos(c, "}"),
      }, nil
    }

PrimitiveType
  = (   "uint8" / "uint16" / "uint32" / "uint64"
      / "int8" / "int16" / "int32" / "int64"
      / "float16" / "float32" / "float64"
      / "bool" / "string"
      / "duration" / "time"
      / "bytes"
      / "ip" / "net"
      / "type" / "null") {
            return &astzed.TypePrimitive{
                Kind: "TypePrimitive",
                Name: string(c.text),
                NamePos: c.pos.offset,
            }, nil
        }

TypeFieldList
  = first:TypeField rest:TypeFieldListTail* {
    return prepend(first, rest), nil
  }
  / "" { return nil, nil }

TypeFieldListTail = __ "," __ typ:TypeField { return typ, nil }

TypeField
  = name:FieldName __ ":" __ typ:Type {
      return astzed.TypeField{
          Name: name.(string),
          Type: typ.(astzed.Type),
      }, nil
    }

FieldName
  = IdentifierName
  / QuotedString

AndToken = ("and" / "AND") !IdentifierRest { return "and", nil }
ByToken = "by" !IdentifierRest
FalseToken = "false" !IdentifierRest
InToken = "in" !IdentifierRest
NotToken = ("not" / "NOT") !IdentifierRest { return "not", nil }
NullToken = "null" !IdentifierRest
OrToken = ("or" / "OR") !IdentifierRest { return "or", nil }
TrueToken = "true" !IdentifierRest

Identifier
  = id:IdentifierName {
      return &ast.ID{
          Kind: "ID",
          Name: id.(string),
          NamePos: c.pos.offset,
      }, nil
    }

Identifiers
  = first:Identifier rest:(__ "," __ name:Identifier { return name, nil })* {
    return prepend(first, rest), nil
  }

IdentifierName
  = !(IDGuard !IdentifierRest) IdentifierStart IdentifierRest* { return string(c.text), nil }
  / "$" { return string(c.text), nil }
  / "\\" id:IDGuard { return id, nil }
  // "type" is a search guard but should not be an id guard
  / "type" { return string(c.text), nil }

IdentifierStart
  = UnicodeLetter
  / "$"
  / "_"

IdentifierRest
  = IdentifierStart
  / UnicodeCombiningMark
  / UnicodeDigit
  / UnicodeConnectorPunctuation

IDGuard
  = BooleanLiteral
  / NullLiteral
  / NaN
  / Infinity

Time
  = FullDate "T" FullTime {
      return newPrimitive(c, "time", string(c.text)), nil
    }

FullDate = D4 "-" D2 "-" D2

D4 = [0-9][0-9][0-9][0-9]
D2 = [0-9][0-9]

FullTime = PartialTime TimeOffset

PartialTime = D2 ":" D2 ":" D2 ("." [0-9]+)?

TimeOffset
  = "Z"
  / ("+" / "-") D2 ":" D2 ("." [0-9]+)?

Duration
  = "-"? (Decimal TimeUnit)+ {
      return newPrimitive(c, "duration", string(c.text)), nil
    }

Decimal = UInt ("." UInt)?

TimeUnit
  = "ns"
  / "us"
  / "ms"
  / "s"
  / "m"
  / "h"
  / "d"
  / "w"
  / "y"

IP
  = UInt "." UInt "." UInt "." UInt { return string(c.text), nil }

IP6
  = !(Hex ":" Hex !(HexDigit / ":")) v:IP6Variations { return v, nil }

// this matches a superset of legal syntax for ip6 addresses but the compiler
// will catch any errors when translating the filter
IP6Variations
  = a:HexColon+ b:IP6Tail {
      return joinChars(a) + b.(string), nil
    }
  / a:Hex b:ColonHex* "::" d:HexColon* e:IP6Tail {
      return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil
    }
  / "::" a:HexColon* b:IP6Tail {
      return "::" + joinChars(a) + b.(string), nil
    }
  / a:Hex b:ColonHex* "::" {
      return a.(string) + joinChars(b) + "::", nil
    }
  / "::" {
      return "::", nil
    }

IP6Tail
  = IP
  / Hex

ColonHex = ":" v:Hex { return ":" + v.(string), nil }

HexColon = v:Hex ":" { return v.(string) + ":", nil }

IP4Net
  = a:IP '/' m:UIntString {
      return a.(string) + "/" + m.(string), nil
    }

IP6Net
  = a:IP6 '/' m:UIntString {
      return a.(string) + "/" + m.(string), nil
    }

UInt
 = s:UIntString { return parseInt(s), nil }

IntString
  = UIntString
  / MinusIntString

UIntString = [0-9]+ { return string(c.text), nil }

MinusIntString
  = "-" UIntString { return string(c.text), nil }

FloatString
  = "-"? [0-9]+ "." [0-9]* ExponentPart? { return string(c.text), nil }
  / "-"? "." [0-9]+ ExponentPart? { return string(c.text), nil }
  / (NaN / Infinity) { return string(c.text), nil }


ExponentPart = "e"i [+-]? UIntString

NaN = "NaN"

Infinity = ("-" / "+")? "Inf"

Hex = HexDigit+ { return string(c.text), nil }

HexDigit = [0-9a-fA-F]

QuotedString
  = '"' v:DoubleQuotedChar* '"' { return joinChars(v), nil }
  / "'" v:SingleQuotedChar* "'" { return joinChars(v), nil }

DoubleQuotedChar
  = !('"' / EscapedChar) . { return string(c.text), nil }
  / "\\" s:EscapeSequence { return s, nil }

KeyWord
  = head:KeyWordStart tail:KeyWordRest* { return head.(string) + joinChars(tail), nil }

KeyWordStart
  = KeyWordChars
  / KeyWordEsc

KeyWordRest
  = KeyWordStart
  / [0-9]

KeyWordChars = (UnicodeLetter / [_.:/%#@~]) { return string(c.text), nil }

KeyWordEsc = "\\" s:(KeywordEscape / EscapeSequence) { return s, nil }

GlobPattern
  = &GlobProperStart &GlobHasStar head:GlobStart tail:GlobRest* {
      return head.(string) + joinChars(tail), nil
    }

GlobProperStart = KeyWordStart / "*"+ KeyWordRest
GlobHasStar = KeyWordRest* "*"

GlobStart
  = KeyWordChars
  / GlobEsc
  / "*" { return "*", nil }

GlobRest
  = GlobStart
  / [0-9]

GlobEsc = "\\" s:(GlobEscape / EscapeSequence) { return s, nil }

GlobEscape
  = "=" { return "=", nil }
  / "*" { return "\\*", nil }
  / [+-]

SingleQuotedChar
  = !("'" / EscapedChar) . { return string(c.text), nil }
  / "\\" s:EscapeSequence { return s, nil }

EscapeSequence
  = SingleCharEscape
  / UnicodeEscape

SingleCharEscape
  = "'"
  / "\"" { return string(c.text), nil }
  / "\\"
  / "b" { return "\b", nil }
  / "f" { return "\f", nil }
  / "n" { return "\n", nil }
  / "r" { return "\r", nil }
  / "t" { return "\t", nil }
  / "v" { return "\v", nil }

KeywordEscape
  = "=" { return "=", nil }
  / "*" { return "*", nil }
  / [+-]

UnicodeEscape
  = "u" chars:(HexDigit HexDigit HexDigit HexDigit) {
      return makeUnicodeChar(chars), nil
    }
  / "u" "{" chars:(HexDigit HexDigit? HexDigit? HexDigit? HexDigit? HexDigit?) "}" {
      return makeUnicodeChar(chars), nil
    }

RegexpPattern
  = "/" body:RegexpBody "/" !KeyWordStart { return body, nil }

RegexpBody
  = ([^/\\] / "\\" .)+ { return string(c.text), nil }

EscapedChar
  = [\x00-\x1f\\]

_ = AnySpace+

__ = AnySpace*

AnySpace
  = WhiteSpace
  / LineTerminator
  / Comment

UnicodeLetter
  = Lu
  / Ll
  / Lt
  / Lm
  / Lo
  / Nl

UnicodeCombiningMark
  = Mn
  / Mc

UnicodeDigit
  = Nd

UnicodeConnectorPunctuation
  = Pc

// Unicode Character Categories
// Taken from: https://github.com/pegjs/pegjs/blob/b7b87ea8aeeaa1caf096e2da99fd95a971890ca1/examples/javascript.pegjs#L374

// Letter, Lowercase
Ll = [\u0061-\u007A\u00B5\u00DF-\u00F6\u00F8-\u00FF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137-\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148-\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C-\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA-\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9-\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC-\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF-\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F-\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0-\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB-\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE-\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0560-\u0588\u10D0-\u10FA\u10FD-\u10FF\u13F8-\u13FD\u1C80-\u1C88\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6-\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FC7\u1FD0-\u1FD3\u1FD6-\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6-\u1FF7\u210A\u210E-\u210F\u2113\u212F\u2134\u2139\u213C-\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65-\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73-\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3-\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7AF\uA7B5\uA7B7\uA7B9\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A]

// Letter, Modifier
Lm = [\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5-\u06E6\u07F4-\u07F5\u07FA\u081A\u0824\u0828\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D6A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D-\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA69C-\uA69D\uA717-\uA71F\uA770\uA788\uA7F8-\uA7F9\uA9CF\uA9E6\uAA70\uAADD\uAAF3-\uAAF4\uAB5C-\uAB5F\uFF70\uFF9E-\uFF9F]

// Letter, Other
Lo = [\u00AA\u00BA\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05EF-\u05F2\u0620-\u063F\u0641-\u064A\u066E-\u066F\u0671-\u06D3\u06D5\u06EE-\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0980\u0985-\u098C\u098F-\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC-\u09DD\u09DF-\u09E1\u09F0-\u09F1\u09FC\u0A05-\u0A0A\u0A0F-\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32-\u0A33\u0A35-\u0A36\u0A38-\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2-\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0-\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F-\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32-\u0B33\u0B35-\u0B39\u0B3D\u0B5C-\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99-\u0B9A\u0B9C\u0B9E-\u0B9F\u0BA3-\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60-\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0-\u0CE1\u0CF1-\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32-\u0E33\u0E40-\u0E45\u0E81-\u0E82\u0E84\u0E87-\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA-\u0EAB\u0EAD-\u0EB0\u0EB2-\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065-\u1066\u106E-\u1070\u1075-\u1081\u108E\u1100-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE-\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5-\u1CF6\u2135-\u2138\u2D30-\u2D67\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEF\uA000-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A-\uA62B\uA66E\uA6A0-\uA6E5\uA78F\uA7F7\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD-\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9E0-\uA9E4\uA9E7-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5-\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADC\uAAE0-\uAAEA\uAAF2\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40-\uFB41\uFB43-\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]

// Letter, Titlecase
Lt = [\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC]

// Letter, Uppercase
Lu = [\u0041-\u005A\u00C0-\u00D6\u00D8-\u00DE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178-\u0179\u017B\u017D\u0181-\u0182\u0184\u0186-\u0187\u0189-\u018B\u018E-\u0191\u0193-\u0194\u0196-\u0198\u019C-\u019D\u019F-\u01A0\u01A2\u01A4\u01A6-\u01A7\u01A9\u01AC\u01AE-\u01AF\u01B1-\u01B3\u01B5\u01B7-\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A-\u023B\u023D-\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E-\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9-\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0-\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C90-\u1CBA\u1CBD-\u1CBF\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E-\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D-\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uA7B8\uFF21-\uFF3A]

// Mark, Spacing Combining
Mc = [\u0903\u093B\u093E-\u0940\u0949-\u094C\u094E-\u094F\u0982-\u0983\u09BE-\u09C0\u09C7-\u09C8\u09CB-\u09CC\u09D7\u0A03\u0A3E-\u0A40\u0A83\u0ABE-\u0AC0\u0AC9\u0ACB-\u0ACC\u0B02-\u0B03\u0B3E\u0B40\u0B47-\u0B48\u0B4B-\u0B4C\u0B57\u0BBE-\u0BBF\u0BC1-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD7\u0C01-\u0C03\u0C41-\u0C44\u0C82-\u0C83\u0CBE\u0CC0-\u0CC4\u0CC7-\u0CC8\u0CCA-\u0CCB\u0CD5-\u0CD6\u0D02-\u0D03\u0D3E-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D57\u0D82-\u0D83\u0DCF-\u0DD1\u0DD8-\u0DDF\u0DF2-\u0DF3\u0F3E-\u0F3F\u0F7F\u102B-\u102C\u1031\u1038\u103B-\u103C\u1056-\u1057\u1062-\u1064\u1067-\u106D\u1083-\u1084\u1087-\u108C\u108F\u109A-\u109C\u17B6\u17BE-\u17C5\u17C7-\u17C8\u1923-\u1926\u1929-\u192B\u1930-\u1931\u1933-\u1938\u1A19-\u1A1A\u1A55\u1A57\u1A61\u1A63-\u1A64\u1A6D-\u1A72\u1B04\u1B35\u1B3B\u1B3D-\u1B41\u1B43-\u1B44\u1B82\u1BA1\u1BA6-\u1BA7\u1BAA\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2-\u1BF3\u1C24-\u1C2B\u1C34-\u1C35\u1CE1\u1CF2-\u1CF3\u1CF7\u302E-\u302F\uA823-\uA824\uA827\uA880-\uA881\uA8B4-\uA8C3\uA952-\uA953\uA983\uA9B4-\uA9B5\uA9BA-\uA9BB\uA9BD-\uA9C0\uAA2F-\uAA30\uAA33-\uAA34\uAA4D\uAA7B\uAA7D\uAAEB\uAAEE-\uAAEF\uAAF5\uABE3-\uABE4\uABE6-\uABE7\uABE9-\uABEA\uABEC]

// Mark, Nonspacing
Mn = [\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1-\u05C2\u05C4-\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7-\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962-\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2-\u09E3\u09FE\u0A01-\u0A02\u0A3C\u0A41-\u0A42\u0A47-\u0A48\u0A4B-\u0A4D\u0A51\u0A70-\u0A71\u0A75\u0A81-\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7-\u0AC8\u0ACD\u0AE2-\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B56\u0B62-\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C04\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55-\u0C56\u0C62-\u0C63\u0C81\u0CBC\u0CBF\u0CC6\u0CCC-\u0CCD\u0CE2-\u0CE3\u0D00-\u0D01\u0D3B-\u0D3C\u0D41-\u0D44\u0D4D\u0D62-\u0D63\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB-\u0EBC\u0EC8-\u0ECD\u0F18-\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86-\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039-\u103A\u103D-\u103E\u1058-\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085-\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752-\u1753\u1772-\u1773\u17B4-\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885-\u1886\u18A9\u1920-\u1922\u1927-\u1928\u1932\u1939-\u193B\u1A17-\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ABD\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80-\u1B81\u1BA2-\u1BA5\u1BA8-\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8-\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8-\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099-\u309A\uA66F\uA674-\uA67D\uA69E-\uA69F\uA6F0-\uA6F1\uA802\uA806\uA80B\uA825-\uA826\uA8C4-\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9E5\uAA29-\uAA2E\uAA31-\uAA32\uAA35-\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7-\uAAB8\uAABE-\uAABF\uAAC1\uAAEC-\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F]

// Number, Decimal Digit
Nd = [\u0030-\u0039\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F29\u1040-\u1049\u1090-\u1099\u17E0-\u17E9\u1810-\u1819\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\uA620-\uA629\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19]

// Number, Letter
Nl = [\u16EE-\u16F0\u2160-\u2182\u2185-\u2188\u3007\u3021-\u3029\u3038-\u303A\uA6E6-\uA6EF]

// Punctuation, Connector
Pc = [\u005F\u203F-\u2040\u2054\uFE33-\uFE34\uFE4D-\uFE4F\uFF3F]

// Separator, Space
Zs = [\u0020\u00A0\u1680\u2000-\u200A\u202F\u205F\u3000]

SourceCharacter
  = .

WhiteSpace "whitespace"
  = "\t"
  / "\v"
  / "\f"
  / " "
  / "\u00A0"
  / "\uFEFF"
  / Zs

LineTerminator
  = [\n\r\u2028\u2029]

// XXX We will leave multi-line comments out for now since there is some work
// that needs to be done disambiguating among KeyWord, Regexp, and "/*".
// We will tackle this in the search-expr branch that is changing the grammar
// to better mix together ad hoc keyword search with formal boolean expressions.
Comment "comment"
  // = MultiLineComment
  // / SingleLineComment
  = SingleLineComment

MultiLineComment
  = "/*" (!"*/" SourceCharacter)* "*/"

SingleLineComment
  = "//" (!LineTerminator SourceCharacter)*

EOL = WhiteSpace* LineTerminator

EOT = _ / EOF

EOF = !.

EOKW = !KeyWordChars

/// === SuperSQL ===

SuperSQL
  = __ s:SQLPipe __ EOF           { return []any{s}, nil}

SQLPipe
  = s:SelectExpr tail:SQLPipeElem+ {
        return &ast.SQLPipe{
            Kind: "SQLPipe",
            Ops: sliceOf[ast.Op](prepend(s, tail)),
        }, nil
      }
    / from:FromExpr tail:SQLPipeElem+ {
        return &ast.SQLPipe{
            Kind: "SQLPipe",
            Ops: sliceOf[ast.Op](prepend(from, tail)),
        }, nil
      }
    / SelectExpr

FromExpr
  = KW_FROM _ from:FromList {
      // Select with no args is like select * (i.e., from only)
      return &ast.Select{
          Kind: "Select",
          Value: true,
          From: sliceOf[ast.Op](from),
      }, nil
    }

SQLPipeElem = __ Pipe __ o:SQLPipeOp { return o, nil }

SQLPipeOp
  = SelectExpr
  / WhereOp
  / DropOp 
  / RenameOp //XXX this needs to use as syntax
  / &KW_AGGREGATE a:Aggregation { return a, nil }
  / FuseOp

  // NOT YET - AsOp, 

SelectExpr 
  = with:OptWithClause
    body:(
        SetOperation
      / Select
      / "(" __ s:SQLPipe __")"      { return s, nil }
    )
    sort:OptSortClause
    limit:OptLimitClause {
      op := body.(ast.Op)
      if with != nil {
          w := with.(*ast.With)
          w.Body = op
          op = w 
      }
      if sort != nil {
          op = &ast.OrderBy{
            Kind: "OrderBy",
            Op: op,
            Exprs: sort.([]ast.SortExpr),
          }
      }
      if limit != nil {
          l := limit.(*ast.Limit)
          l.Op = op
          op = l
      }
      return op, nil
    }

//SimpleSelect 
//  = SimpleSelectClause
//XXX  / ValuesClause 

Select 
  = KW_SELECT 
    distinct:OptDistinct
    value:OptSelectValue
    //XXX for whitespace in front of target need it only if it begins with 
    // an identifier, e.g., select(1); is ok
    _ args:SelectList
    from:OptFromClause
    where:OptWhereClause
    group:OptGroupClause
    having:OptHavingClause
    // XXX NOTYET OptQualifyClause
    // XXX NOTYET OptWindowClause
    {
      sel := &ast.Select{
          Kind: "Select",
          Distinct: distinct.(bool),
          Value: value.(bool),
          Args: sliceOf[ast.Assignment](args),
      }
      if from != nil {
        sel.From = sliceOf[ast.Op](from)
      }
      if where != nil {
        sel.Where = where.(ast.Expr)
      }
      if group != nil {
        sel.GroupBy = sliceOf[ast.Expr](group)
      }
      if having != nil {
        sel.Having = having.(ast.Expr)
      }
      return sel, nil
    }

OptDistinct
  = _ KW_ALL        { return false, nil }
  / _ KW_DISTINCT   { return true, nil }
  / ""              { return false, nil }

OptSelectValue
  = _ KW_AS _ KW_VALUE  { return true, nil }
  / _ KW_VALUE          { return true, nil } // SQL++ form XXX decide which
  / ""                  { return false, nil }

OptWithClause 
  = WithClause 
  / ""          { return nil, nil }

WithClause 
  = _ KW_WITH r:OptRecursive _ ctes:CteList {
        return &ast.With{
            Kind: "With",
            Recursive: r.(bool), 
            CTEs: sliceOf[ast.CTE](ctes),
        }, nil
    }

OptRecursive 
  = _ KW_RECURSIVE  { return true, nil }
  / ""              { return false, nil }

CteList = first:Cte rest:( __ "," __ cte:Cte { return cte, nil} )* {
    return prepend(first, rest), nil 
}

Cte
  = name:AliasName _ KW_AS m:OptMaterialized __ "(" __ s:SQLPipe __ ")" {
        return ast.CTE{
            Name: name.(string),
            Materialized: m.(*bool),
            Op: s.(ast.Op),
        }, nil
    }

AliasName = Identifier // XXX add backquoted strings

//XXX NOT is different than nothing here
OptMaterialized 
  = _ KW_MATERIALIZED _             { return true, nil }
  / _ KW_NOT _ KW_MATERIALIZED _    { return false, nil }
  / ""                              { return false, nil }

OptAllClause
  = _ KW_ALL 
  / ""

OptFromClause 
  = _ KW_FROM _ list:FromList { // OptAsOfClause
      return list, nil
    }
  / ""                  { return nil, nil }

//XXX add pivot, unpivot, type projection
FromList
  = first:FromItem rest:( __ "," __ t:FromItem { return t, nil} )* {
      return prepend(first, rest), nil
    }

OptWhereClause
  = where:WhereClause     { return where, nil }
  / ""                      { return nil, nil }

OptGroupClause
  = _ group:GroupClause { return group, nil }
  / ""                  { return nil, nil }

GroupClause
  = KW_GROUP _ KW_BY _ list:GroupByList { return list, nil }

GroupByList 
  = first:GroupByItem rest:( __ "," __ g:GroupByItem { return g, nil } )* {
      return prepend(first, rest), nil
    }

GroupByItem = Expr

OptHavingClause
  = _ h:HavingClause { return h, nil }
  / "" { return nil, nil }

HavingClause
  = KW_HAVING _ e:Expr { return e, nil } // XXX whitespace optional before noident

//XXX see field_path
FromItem 
  = JoinOperation 
  / "(" __ join:JoinOperation __ ")" { return join, nil }
  / !SQLGuard ref:TableRef a:OptAlias {
      table := ref.(*ast.Table)
      if a.(string) != "" {
        return &ast.Alias{
            Kind: "Alias",
            Name: a.(string),
            Op: table,
        }, nil
      }
      return table, nil
    }
  / "(" __ s:SQLPipe __ ")" a:OptAlias {
      if a != "" {
        return ast.Alias{
            Kind: "Alias",
            Op: s.(ast.Op),
            Name:a.(string),
        }, nil
      }
      return s, nil
    }
  // XXX UnnestOperator 

JoinOperation
  = CrossJoin
  / ConditionJoin

CrossJoin
  = left:FromItem op:CrossJoinOp right:FromItem {
        return &ast.CrossJoin{
            Kind: "CrossJoin",
            Left: left.(ast.Op),
            Right: right.(ast.Op),
        }, nil
    }

CrossJoinOp 
  = __ "," __ 
  / _ KW_CROSS _ KW_JOIN _ 

ConditionJoin
  = left:FromItem style:SQLJoinStyle _ right:FromItem e:JoinExpr {
        return &ast.SQLJoin{
            Kind: "SQLJoin",
            Style: style.(string),
            Left: left.(ast.Op),
            Right: right.(ast.Op),
            Cond: e.(ast.JoinExpr),
        }, nil
    }

//XXX requiring whitespace before join keywords problematic because 
// a table expression can end in close paren etc >

// XXX need anti join

SQLJoinStyle 
  = (_ KW_INNER)? _ KW_JOIN             { return "inner", nil }
  / _ KW_FULL (_ KW_OUTER)? _ KW_JOIN   { return "full", nil }
  / _ KW_LEFT (_ KW_OUTER)? _ KW_JOIN   { return "left", nil }
  / _ KW_RIGHT (_ KW_OUTER)? _ KW_JOIN   { return "right", nil }

JoinExpr 
  = _ KW_ON _ e:Expr { // XXX == for equijoin here
        return &ast.JoinOn{
            Kind: "JoinOn", 
            Expr: e.(ast.Expr),
        }, nil
    }
  / _ KW_USING __ "(" __ fields:FieldExprs __ ")" {
        return &ast.JoinUsing{
            Kind: "JoinUsing",
            Fields: sliceOf[ast.Expr](fields),
        }, nil
    }

//XXX decide how file vs pool vs url will work; for now, the prototype 
// assumes file
TableRef = name:(IdentifierName / QuotedString) {
    return &ast.Table{ //XXX
        Kind: "Table",
        Name: name.(string),
    }, nil
  }

OptAlias
  = _ a:AliasClause { return a, nil }
  / ""              { return "", nil }

OptOrdinality 
  = _ KW_WITH _ KW_ORDINALITY   { return true, nil }
  / ""                          { return false, nil }

AliasClause 
  = (KW_AS _)? !SQLGuard name:IdentifierName { // optional column defs no types
      return name, nil
    }

SelectList
  = first:SelectElem rest:( __ "," __ s:SelectElem{ return s, nil })* {
      return prepend(first, rest), nil
  }

//XXX need to add *, id.*, except, replace
SelectElem 
  = e:Expr as:OptAsClause {
      elem := ast.Assignment{
        Kind: "Assignment",
        RHS: e.(ast.Expr),
      }
      if as != nil {
          elem.LHS = as.(*ast.ID)
      }
      return elem, nil
    }

OptAsClause 
  = _ KW_AS _ id:Identifier { return id, nil } // XXX need to expand beyond Identifier 
  / ""  { return nil, nil }

OptSortClause 
  = _ KW_ORDER _ KW_BY _ list:OrderByList { return list, nil }
  / ""          { return nil, nil }

OrderByList 
  = first:OrderByItem rest:( __ "," __ o:OrderByItem{ return o, nil})* {
      return sliceOf[ast.SortExpr](prepend(first, rest)), nil
    }

OrderByItem
  = e:Expr order:OptAscDesc nulls:OptNullsOrder {
      s := ast.SortExpr{Kind: "SortExpr", Expr: e.(ast.Expr)}
      if order != nil {
        s.Order = order.(*ast.ID)
      }
      if nulls != nil {
        s.Nulls = nulls.(*ast.ID)
      }
      return s, nil
    }

OptAscDesc
  = _ KW_ASC   { return &ast.ID{Kind: "ID", Name: "asc", NamePos: c.pos.offset}, nil }
  / _ KW_DESC  { return &ast.ID{Kind: "ID", Name: "desc", NamePos: c.pos.offset}, nil }
  / ""         { return nil, nil }

OptNullsOrder
  = _ KW_NULLS _ KW_FIRST   { return &ast.ID{Kind: "ID", Name: "first", NamePos: c.pos.offset}, nil }
  / _ KW_NULLS _ KW_LAST    { return &ast.ID{Kind: "ID", Name: "last", NamePos: c.pos.offset}, nil }
  / ""                      { return nil, nil }

SelectLimit
  = l:LimitClause o:OptOffsetClause {
      limit := l.(*ast.Limit)
      if o != nil {
        limit.Offset = o.(ast.Expr)
      }
      return limit, nil
    }
  / o:OffsetClause l:OptLimitClause {
      if l == nil {
          return &ast.Limit{
            Kind: "Limit",
            Offset: o.(ast.Expr),
          }, nil
      }
      limit := l.(*ast.Limit)
      limit.Offset = o.(ast.Expr)
      return limit, nil
    }

OptLimitClause 
  = _ l:LimitClause { return l, nil }
  / ""              { return nil, nil }

LimitClause 
  = KW_LIMIT _ KW_ALL { return &ast.Limit{Kind:"Limit"}, nil }
  / KW_LIMIT _ e:Expr {
      return &ast.Limit{
        Kind: "Limit",
        Count: e.(ast.Expr),
      }, nil
    }

OptOffsetClause 
  = _ o:OffsetClause  { return o, nil }
  / ""  { return nil, nil }

OffsetClause 
  = KW_OFFSET _ e:Expr  { return e, nil }

SetOperation
  = left:SelectExpr distinct:SetOp _ right:SelectExpr {
        return &ast.Union{
            Kind: "Union",
            Distinct: distinct.(bool),
            Left: left.(ast.Op),
            Right: right.(ast.Op),
        }, nil //XXX
    }

SetOp 
  = _ KW_UNION _ KW_ALL       { return false, nil }
  / _ KW_UNION _ KW_DISTINCT  { return true, nil }
  / ""                      { return true, nil}

CaseExpr
  = KW_CASE __
    condition_list:case_when_then_list __
    otherwise:case_else? __
    KW_END __ KW_CASE? {
//      if (otherwise) condition_list.push(otherwise);
//      return {
//        type: 'case',
//        expr: null,
//        args: condition_list
//      }
        return nil, nil
    }
  / KW_CASE __
    expr:expr __
    condition_list:case_when_then_list __
    otherwise:case_else? __
    KW_END __ KW_CASE? {
//      if (otherwise) condition_list.push(otherwise);
//      return {
//        type: 'case',
//        expr: expr,
//        args: condition_list
//      }
        return nil, nil
    }

case_when_then_list
  = head:case_when_then __ tail:(__ case_when_then)* {
//    return createList(head, tail, 1)
    return nil, nil
  }

case_when_then
  = KW_WHEN __ condition:or_and_where_expr __ KW_THEN __ result:expr {
//    return {
//      type: 'when',
//      cond: condition,
//      result: result
//    };
    return nil, nil
  }

CaseElse = KW_ELSE __ result:expr {
//    return { type: 'else', result: result }
    return nil, nil
  }

//XXX need select *
//Star
//  = "*" {
//    return &ast.Star{}
//    }

CastExpr
  = KW_CAST __ "(" __ e:Expr _ KW_AS _ t:Type __ ")" {
    return nil, nil
  }
  / k:cast_keyword __ LPAREN __ e:expr __ KW_AS __ KW_DECIMAL __ LPAREN __ precision:int __ RPAREN __ RPAREN {
//    return {
//      type: 'cast',
//      keyword: c.toLowerCase(),
//      expr: e,
//      symbol: 'as',
//      target: {
//        dataType: 'DECIMAL(' + precision + ')'
//      }
//    };
    return nil, nil
  }
  / k:cast_keyword __ LPAREN __ e:expr __ KW_AS __ KW_DECIMAL __ LPAREN __ precision:int __ COMMA __ scale:int __ RPAREN __ RPAREN {
//      return {
//        type: 'cast',
//        keyword: c.toLowerCase(),
//        expr: e,
//        symbol: 'as',
//        target: {
//          dataType: 'DECIMAL(' + precision + ', ' + scale + ')'
//        }
//      }
      return nil, nil
    }
  / k:cast_keyword __ LPAREN __ e:expr __ KW_AS __ s:signedness __ t:KW_INTEGER? __ RPAREN { /* MySQL cast to un-/signed integer */
//    return {
//      type: 'cast',
//      keyword: c.toLowerCase(),
//      expr: e,
//      symbol: 'as',
//      target: {
//        dataType: s + (t ? ' ' + t: '')
//      }
//    }
    return nil, nil
  }


//XXX not complete
SQLGuard =
    KW_FROM / KW_GROUP / KW_HAVING / KW_SELECT / KW_RECURSIVE
  / KW_INNER / KW_LEFT / KW_RIGHT / KW_OUTER / KW_CROSS / KW_JOIN
  / KW_UNION / KW_INTERSECT
  / KW_ORDER
  / KW_LIMIT
  / KW_WHERE 
  / KW_WITH
  / KW_USING
  / KW_ON

KW_AGGREGATE  = "AGGREGATE"i    !IdentifierStart

KW_ONLY = "ONLY"i       !IdentifierStart
KW_NULLS    = "NULLS"i       !IdentifierStart
KW_NULL     = "NULL"i       !IdentifierStart
KW_NOT_NULL = "NOT NULL"i   !IdentifierStart
KW_TRUE     = "TRUE"i       !IdentifierStart
KW_TO       = "TO"i         !IdentifierStart
KW_FALSE    = "FALSE"i      !IdentifierStart

KW_SELECT   = "SELECT"i     !IdentifierStart
KW_RECURSIVE= "RECURSIVE"   !IdentifierStart
KW_IGNORE   = "IGNORE"i     !IdentifierStart
KW_EXPLAIN  = "EXPLAIN"i    !IdentifierStart

KW_INTO     = "INTO"i       !IdentifierStart
KW_FROM     = "FROM"i       !IdentifierStart
KW_SET      = "SET"i        !IdentifierStart { return "SET", nil }
KW_UNLOCK   = "UNLOCK"i     !IdentifierStart
KW_LOCK     = "LOCK"i       !IdentifierStart

KW_AS       = "AS"i         !IdentifierStart
KW_TABLE    = "TABLE"i      !IdentifierStart { return "TABLE", nil }
KW_TABLES   = "TABLES"i      !IdentifierStart { return "TABLES", nil }
KW_COLLATE  = "COLLATE"i    !IdentifierStart { return "COLLATE", nil }

KW_ON       = "ON"i       !IdentifierStart
KW_LEFT     = "LEFT"i     !IdentifierStart
KW_RIGHT    = "RIGHT"i    !IdentifierStart
KW_FULL     = "FULL"i     !IdentifierStart
KW_INNER    = "INNER"i    !IdentifierStart
KW_CROSS    = "CROSS"i    !IdentifierStart
KW_JOIN     = "JOIN"i     !IdentifierStart
KW_OUTER    = "OUTER"i    !IdentifierStart
KW_OVER     = "OVER"i     !IdentifierStart
KW_UNION    = "UNION"i    !IdentifierStart
KW_INTERSECT    = "INTERSECT"i    !IdentifierStart
KW_EXCEPT    = "EXCEPT"i    !IdentifierStart

KW_VALUE    = "VALUE"i    !IdentifierStart { return "VALUE", nil }
KW_VALUES   = "VALUES"i   !IdentifierStart
KW_USING    = "USING"i    !IdentifierStart

KW_WHERE    = "WHERE"i      !IdentifierStart
KW_WITH     = "WITH"i       !IdentifierStart

KW_GROUP    = "GROUP"i      !IdentifierStart
KW_BY       = "BY"i         !IdentifierStart
KW_ORDER    = "ORDER"i      !IdentifierStart
KW_HAVING   = "HAVING"i     !IdentifierStart
KW_QUALIFY  = "QUALIFY"i     !IdentifierStart
KW_WINDOW   = "WINDOW"i  !IdentifierStart
KW_ORDINAL  = "ORDINAL"i !IdentifierStart { return "ORDINAL", nil }
KW_SAFE_ORDINAL  = "SAFE_ORDINAL"i !IdentifierStart { return "SAFE_ORDINAL", nil }

KW_LIMIT    = "LIMIT"i      !IdentifierStart
KW_OFFSET   = "OFFSET"i     !IdentifierStart { return "OFFSET", nil }
KW_SAFE_OFFSET   = "SAFE_OFFSET"i     !IdentifierStart { return "SAFE_OFFSET", nil }

KW_ASC      = "ASC"i        !IdentifierStart { return "ASC", nil }
KW_DESC     = "DESC"i       !IdentifierStart { return "DESC", nil }

KW_ALL      = "ALL"i        !IdentifierStart { return "ALL", nil }
KW_DISTINCT = "DISTINCT"i   !IdentifierStart { return "DISTINCT", nil }

KW_BETWEEN  = "BETWEEN"i    !IdentifierStart { return "BETWEEN", nil }
KW_IN       = "IN"i         !IdentifierStart { return "IN", nil }
KW_IS       = "IS"i         !IdentifierStart { return "IS", nil }
KW_LIKE     = "LIKE"i       !IdentifierStart { return "LIKE", nil }
KW_EXISTS   = "EXISTS"i     !IdentifierStart { return "EXISTS", nil }

KW_NOT      = "NOT"i        !IdentifierStart { return "NOT", nil }
KW_AND      = "AND"i        !IdentifierStart { return "AND", nil }
KW_OR       = "OR"i         !IdentifierStart { return "OR", nil }

KW_COUNT    = "COUNT"i      !IdentifierStart { return "COUNT", nil }
KW_MAX      = "MAX"i        !IdentifierStart { return "MAX", nil }
KW_MIN      = "MIN"i        !IdentifierStart { return "MIN", nil }
KW_SUM      = "SUM"i        !IdentifierStart { return "SUM", nil }
KW_AVG      = "AVG"i        !IdentifierStart { return "AVG", nil }

KW_EXTRACT  = "EXTRACT"i    !IdentifierStart { return "EXTRACT", nil }
KW_CALL     = "CALL"i       !IdentifierStart { return "CALL", nil }

KW_CASE     = "CASE"i       !IdentifierStart
KW_WHEN     = "WHEN"i       !IdentifierStart
KW_THEN     = "THEN"i       !IdentifierStart
KW_ELSE     = "ELSE"i       !IdentifierStart
KW_END      = "END"i        !IdentifierStart

KW_CAST     = "CAST"i       !IdentifierStart { return "CAST", nil }
KW_SAFE_CAST     = "SAFE_CAST"i   !IdentifierStart { return "SAFE_CAST", nil }

KW_ARRAY     = "ARRAY"i     !IdentifierStart { return "ARRAY", nil }
KW_BYTES     = "BYTES"i     !IdentifierStart { return "BYTES", nil }
KW_BOOL     = "BOOL"i     !IdentifierStart { return "BOOL", nil }
KW_CHAR     = "CHAR"i     !IdentifierStart { return "CHAR", nil }
KW_GEOGRAPHY = "GEOGRAPHY"i     !IdentifierStart { return "GEOGRAPHY", nil }
KW_VARCHAR  = "VARCHAR"i  !IdentifierStart { return "VARCHAR", nil }
KW_NUMERIC  = "NUMERIC"i  !IdentifierStart { return "NUMERIC", nil }
KW_DECIMAL  = "DECIMAL"i  !IdentifierStart { return "DECIMAL", nil }
KW_SIGNED   = "SIGNED"i   !IdentifierStart { return "SIGNED", nil }
KW_UNSIGNED = "UNSIGNED"i !IdentifierStart { return "UNSIGNED", nil }
KW_INT_64     = "INT64"i      !IdentifierStart { return "INT64", nil }
KW_ZEROFILL = "ZEROFILL"i !IdentifierStart { return "ZEROFILL", nil }
KW_INTEGER  = "INTEGER"i  !IdentifierStart { return "INTEGER", nil }
KW_JSON     = "JSON"i     !IdentifierStart { return "JSON", nil }
KW_SMALLINT = "SMALLINT"i !IdentifierStart { return "SMALLINT", nil }
KW_STRING = "STRING"i !IdentifierStart { return "STRING", nil }
KW_STRUCT = "STRUCT"i !IdentifierStart { return "STRUCT", nil }
KW_TINYINT  = "TINYINT"i  !IdentifierStart { return "TINYINT", nil }
KW_TINYTEXT = "TINYTEXT"i !IdentifierStart { return "TINYTEXT", nil }
KW_TEXT     = "TEXT"i     !IdentifierStart { return "TEXT", nil }
KW_MEDIUMTEXT = "MEDIUMTEXT"i  !IdentifierStart { return "MEDIUMTEXT", nil }
KW_LONGTEXT  = "LONGTEXT"i  !IdentifierStart { return "LONGTEXT", nil }
KW_BIGINT   = "BIGINT"i   !IdentifierStart { return "BIGINT", nil }
KW_FLOAT_64   = "FLOAT64"i   !IdentifierStart { return "FLOAT64", nil }
KW_DOUBLE   = "DOUBLE"i   !IdentifierStart { return "DOUBLE", nil }
KW_DATE     = "DATE"i     !IdentifierStart { return "DATE", nil }
KW_DATETIME = "DATETIME"i     !IdentifierStart { return "DATETIME", nil }
KW_ROWS     = "ROWS"i     !IdentifierStart { return "ROWS", nil }
KW_TIME     = "TIME"i     !IdentifierStart { return "TIME", nil }
KW_TIMESTAMP= "TIMESTAMP"i!IdentifierStart { return "TIMESTAMP", nil }

KW_CURRENT_DATE     = "CURRENT_DATE"i !IdentifierStart { return "CURRENT_DATE", nil }
KW_ADD_DATE         = "ADDDATE"i !IdentifierStart { return "ADDDATE", nil }
KW_INTERVAL         = "INTERVAL"i !IdentifierStart { return "INTERVAL", nil }
KW_UNIT_YEAR        = "YEAR"i !IdentifierStart { return "YEAR", nil }
KW_UNIT_ISOYEAR     = "ISOYEAR"i !IdentifierStart { return "ISOYEAR", nil }
KW_UNIT_MONTH       = "MONTH"i !IdentifierStart { return "MONTH", nil }
KW_UNIT_DAY         = "DAY"i !IdentifierStart { return "DAY", nil }
KW_UNIT_HOUR        = "HOUR"i !IdentifierStart { return "HOUR", nil }
KW_UNIT_MINUTE      = "MINUTE"i !IdentifierStart { return "MINUTE", nil }
KW_UNIT_SECOND      = "SECOND"i !IdentifierStart { return "SECOND", nil }
KW_UNIT_WEEK        = "WEEK"i !IdentifierStart { return "WEEK", nil }
KW_CURRENT_TIME     = "CURRENT_TIME"i !IdentifierStart { return "CURRENT_TIME", nil }
KW_CURRENT_TIMESTAMP= "CURRENT_TIMESTAMP"i !IdentifierStart { return "CURRENT_TIMESTAMP", nil }
KW_SESSION_USER     = "SESSION_USER"i !IdentifierStart { return "SESSION_USER", nil }

KW_GLOBAL         = "GLOBAL"i    !IdentifierStart { return "GLOBAL", nil }
KW_SESSION        = "SESSION"i   !IdentifierStart { return "SESSION", nil }
KW_LOCAL          = "LOCAL"i     !IdentifierStart { return "LOCAL", nil }
KW_PIVOT          = "PIVOT"i   !IdentifierStart { return "PIVOT", nil }
KW_PERSIST        = "PERSIST"i   !IdentifierStart { return "PERSIST", nil }
KW_PERSIST_ONLY   = "PERSIST_ONLY"i   !IdentifierStart { return "PERSIST_ONLY", nil }
KW_VIEW           = "VIEW"i    !IdentifierStart { return "VIEW", nil }

// MySQL Alter
KW_ADD     = "ADD"i     !IdentifierStart { return "ADD", nil }
KW_COLUMN  = "COLUMN"i  !IdentifierStart { return "COLUMN", nil }
KW_INDEX   = "INDEX"i  !IdentifierStart { return "INDEX", nil }
KW_KEY     = "KEY"i  !IdentifierStart { return "KEY", nil }
KW_FULLTEXT = "FULLTEXT"i  !IdentifierStart { return "FULLTEXT", nil }
KW_UNIQUE     = "UNIQUE"i  !IdentifierStart { return "UNIQUE", nil }
KW_COMMENT     = "COMMENT"i  !IdentifierStart { return "COMMENT", nil }
KW_CONSTRAINT  = "CONSTRAINT"i  !IdentifierStart { return "CONSTRAINT", nil }
KW_REFERENCES  = "REFERENCES"i  !IdentifierStart { return "REFERENCES", nil }


comment
  = block_comment
  / line_comment
  / pound_sign_comment

block_comment
  = "/*" (!"*/" char)* "*/"

line_comment
  = "--" (!EOL char)*

pound_sign_comment
  = "#" (!EOL char)*

char = .

interval_unit
  = KW_UNIT_YEAR
  / KW_UNIT_ISOYEAR
  / KW_UNIT_MONTH
  / KW_UNIT_DAY
  / KW_UNIT_HOUR
  / KW_UNIT_MINUTE
  / KW_UNIT_SECOND
  / KW_UNIT_WEEK

whitespace =
  [ \t\n\r]

